#pragma kernel CSMain
static const int threadGroupSize = 1024;

struct Boid {
	float outOfRange;

	float2 position;
	float2 direction;

	float2 flockHeading;
	float2 flockCentre;
	float2 separationHeading;
	int numFlockmates;
};

RWStructuredBuffer<Boid> boids;
int numBoids;
float viewRadius;
float avoidRadius;

float playerX;
float playerY;
float range;

//[numthreads(threadGroupSize, 1, 1)]
[numthreads(1, 1, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
	float2 playerPosition = float2(playerX, playerY);
	float2 pos = playerPosition - boids[id.x].position;
	float dist = pos.x * pos.x + pos.y * pos.y;
	if (dist > (range * range))
	{
		boids[id.x].outOfRange = 1;
	}
	else
	{
		boids[id.x].outOfRange = 0;
	}

	for (int indexB = 0; indexB < numBoids; indexB++) {
		if (id.x != indexB) {
			Boid boidB = boids[indexB];
			float2 offset = boidB.position - boids[id.x].position;
			float sqrDst = offset.x * offset.x + offset.y * offset.y;

			if (sqrDst < viewRadius * viewRadius) {
				boids[id.x].numFlockmates += 1;
				boids[id.x].flockHeading += boidB.direction;
				boids[id.x].flockCentre += boidB.position;

				if (sqrDst < avoidRadius * avoidRadius) {
					boids[id.x].separationHeading -= offset / sqrDst;
				}
			}
		}
	}
}